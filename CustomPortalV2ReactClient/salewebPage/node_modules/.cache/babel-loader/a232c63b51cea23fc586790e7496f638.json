{"ast":null,"code":"import ExpoLocalization from './ExpoLocalization'; // @needsAudit\n\n/**\n * Three-character ISO 4217 currency code. Returns `null` on web.\n *\n * @example `'USD'`, `'EUR'`, `'CNY'`, `null`\n */\n\nexport const currency = ExpoLocalization.currency; // @needsAudit\n\n/**\n * Decimal separator used for formatting numbers.\n *\n * @example `','`, `'.'`\n */\n\nexport const decimalSeparator = ExpoLocalization.decimalSeparator; // @needsAudit\n\n/**\n * Digit grouping separator used when formatting numbers larger than 1000.\n *\n * @example `'.'`, `''`, `','`\n */\n\nexport const digitGroupingSeparator = ExpoLocalization.digitGroupingSeparator; // @needsAudit\n\n/**\n * A list of all the supported language ISO codes.\n */\n\nexport const isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes; // @needsAudit\n\n/**\n * Boolean value that indicates whether the system uses the metric system.\n * On Android and web, this is inferred from the current region.\n */\n\nexport const isMetric = ExpoLocalization.isMetric; // @needsAudit\n\n/**\n * Returns if the system's language is written from Right-to-Left.\n * This can be used to build features like [bidirectional icons](https://material.io/design/usability/bidirectionality.html).\n *\n * Returns `false` in Server Side Rendering (SSR) environments.\n */\n\nexport const isRTL = ExpoLocalization.isRTL; // @needsAudit\n\n/**\n * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag),\n * consisting of a two-character language code and optional script, region and variant codes.\n *\n * @example `'en'`, `'en-US'`, `'zh-Hans'`, `'zh-Hans-CN'`, `'en-emodeng'`\n */\n\nexport const locale = ExpoLocalization.locale; // @needsAudit\n\n/**\n * List of all the native languages provided by the user settings.\n * These are returned in the order the user defines in their device settings.\n *\n * @example `['en', 'en-US', 'zh-Hans', 'zh-Hans-CN', 'en-emodeng']`\n */\n\nexport const locales = ExpoLocalization.locales; // @needsAudit\n\n/**\n * The current time zone in display format.\n * On Web time zone is calculated with Intl.DateTimeFormat().resolvedOptions().timeZone. For a\n * better estimation you could use the moment-timezone package but it will add significant bloat to\n * your website's bundle size.\n *\n * @example `'America/Los_Angeles'`\n */\n\nexport const timezone = ExpoLocalization.timezone; // @needsAudit\n\n/**\n * The region code for your device that comes from the Region setting under Language & Region on iOS.\n * This value is always available on iOS, but might return `null` on Android or web.\n *\n * @example `'US'`, `'NZ'`, `null`\n */\n\nexport const region = ExpoLocalization.region; // @needsAudit\n\n/**\n * Get the latest native values from the device. Locale can be changed on some Android devices\n * without resetting the app.\n * > On iOS, changing the locale will cause the device to reset meaning the constants will always be\n * correct.\n *\n * @example\n * ```ts\n * // When the app returns from the background on Android...\n *\n * const { locale } = await Localization.getLocalizationAsync();\n * ```\n */\n\nexport async function getLocalizationAsync() {\n  return await ExpoLocalization.getLocalizationAsync();\n}","map":{"version":3,"mappings":"AAAA,OAAOA,gBAAP,MAA6B,oBAA7B,C,CAKA;;AACA;;;;;;AAKA,OAAO,MAAMC,QAAQ,GAAGD,gBAAgB,CAACC,QAAlC,C,CAEP;;AACA;;;;;;AAKA,OAAO,MAAMC,gBAAgB,GAAGF,gBAAgB,CAACE,gBAA1C,C,CAEP;;AACA;;;;;;AAKA,OAAO,MAAMC,sBAAsB,GAAGH,gBAAgB,CAACG,sBAAhD,C,CAEP;;AACA;;;;AAGA,OAAO,MAAMC,gBAAgB,GAAGJ,gBAAgB,CAACI,gBAA1C,C,CAEP;;AACA;;;;;AAIA,OAAO,MAAMC,QAAQ,GAAGL,gBAAgB,CAACK,QAAlC,C,CAEP;;AACA;;;;;;;AAMA,OAAO,MAAMC,KAAK,GAAGN,gBAAgB,CAACM,KAA/B,C,CAEP;;AACA;;;;;;;AAMA,OAAO,MAAMC,MAAM,GAAGP,gBAAgB,CAACO,MAAhC,C,CAEP;;AACA;;;;;;;AAMA,OAAO,MAAMC,OAAO,GAAGR,gBAAgB,CAACQ,OAAjC,C,CAEP;;AACA;;;;;;;;;AAQA,OAAO,MAAMC,QAAQ,GAAGT,gBAAgB,CAACS,QAAlC,C,CAEP;;AACA;;;;;;;AAMA,OAAO,MAAMC,MAAM,GAAGV,gBAAgB,CAACU,MAAhC,C,CAEP;;AACA;;;;;;;;;;;;;;AAaA,OAAO,eAAeC,oBAAf,GAAmC;EACxC,OAAO,MAAMX,gBAAgB,CAACW,oBAAjB,EAAb;AACD","names":["ExpoLocalization","currency","decimalSeparator","digitGroupingSeparator","isoCurrencyCodes","isMetric","isRTL","locale","locales","timezone","region","getLocalizationAsync"],"sourceRoot":"","sources":["../src/Localization.ts"],"sourcesContent":["import ExpoLocalization from './ExpoLocalization';\nimport { Localization } from './Localization.types';\n\nexport { Localization };\n\n// @needsAudit\n/**\n * Three-character ISO 4217 currency code. Returns `null` on web.\n *\n * @example `'USD'`, `'EUR'`, `'CNY'`, `null`\n */\nexport const currency = ExpoLocalization.currency;\n\n// @needsAudit\n/**\n * Decimal separator used for formatting numbers.\n *\n * @example `','`, `'.'`\n */\nexport const decimalSeparator = ExpoLocalization.decimalSeparator;\n\n// @needsAudit\n/**\n * Digit grouping separator used when formatting numbers larger than 1000.\n *\n * @example `'.'`, `''`, `','`\n */\nexport const digitGroupingSeparator = ExpoLocalization.digitGroupingSeparator;\n\n// @needsAudit\n/**\n * A list of all the supported language ISO codes.\n */\nexport const isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\n\n// @needsAudit\n/**\n * Boolean value that indicates whether the system uses the metric system.\n * On Android and web, this is inferred from the current region.\n */\nexport const isMetric = ExpoLocalization.isMetric;\n\n// @needsAudit\n/**\n * Returns if the system's language is written from Right-to-Left.\n * This can be used to build features like [bidirectional icons](https://material.io/design/usability/bidirectionality.html).\n *\n * Returns `false` in Server Side Rendering (SSR) environments.\n */\nexport const isRTL = ExpoLocalization.isRTL;\n\n// @needsAudit\n/**\n * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag),\n * consisting of a two-character language code and optional script, region and variant codes.\n *\n * @example `'en'`, `'en-US'`, `'zh-Hans'`, `'zh-Hans-CN'`, `'en-emodeng'`\n */\nexport const locale = ExpoLocalization.locale;\n\n// @needsAudit\n/**\n * List of all the native languages provided by the user settings.\n * These are returned in the order the user defines in their device settings.\n *\n * @example `['en', 'en-US', 'zh-Hans', 'zh-Hans-CN', 'en-emodeng']`\n */\nexport const locales = ExpoLocalization.locales;\n\n// @needsAudit\n/**\n * The current time zone in display format.\n * On Web time zone is calculated with Intl.DateTimeFormat().resolvedOptions().timeZone. For a\n * better estimation you could use the moment-timezone package but it will add significant bloat to\n * your website's bundle size.\n *\n * @example `'America/Los_Angeles'`\n */\nexport const timezone = ExpoLocalization.timezone;\n\n// @needsAudit\n/**\n * The region code for your device that comes from the Region setting under Language & Region on iOS.\n * This value is always available on iOS, but might return `null` on Android or web.\n *\n * @example `'US'`, `'NZ'`, `null`\n */\nexport const region = ExpoLocalization.region;\n\n// @needsAudit\n/**\n * Get the latest native values from the device. Locale can be changed on some Android devices\n * without resetting the app.\n * > On iOS, changing the locale will cause the device to reset meaning the constants will always be\n * correct.\n *\n * @example\n * ```ts\n * // When the app returns from the background on Android...\n *\n * const { locale } = await Localization.getLocalizationAsync();\n * ```\n */\nexport async function getLocalizationAsync(): Promise<Localization> {\n  return await ExpoLocalization.getLocalizationAsync();\n}\n"]},"metadata":{},"sourceType":"module"}