{"ast":null,"code":"/* eslint-env browser */\nimport { Platform } from 'expo-modules-core';\nimport * as rtlDetect from 'rtl-detect';\nexport default {\n  get currency() {\n    // TODO: Add support\n    return null;\n  },\n\n  get decimalSeparator() {\n    return 1.1.toLocaleString().substring(1, 2);\n  },\n\n  get digitGroupingSeparator() {\n    const value = 1000 .toLocaleString();\n    return value.length === 5 ? value.substring(1, 2) : '';\n  },\n\n  get isRTL() {\n    return rtlDetect.isRtlLang(this.locale) ?? false;\n  },\n\n  get isMetric() {\n    const {\n      region\n    } = this;\n\n    switch (region) {\n      case 'US': // USA\n\n      case 'LR': // Liberia\n\n      case 'MM':\n        // Myanmar\n        return false;\n    }\n\n    return true;\n  },\n\n  get locale() {\n    if (!Platform.isDOMAvailable) {\n      return '';\n    }\n\n    const locale = navigator.language || navigator['systemLanguage'] || navigator['browserLanguage'] || navigator['userLanguage'] || this.locales[0];\n    return locale;\n  },\n\n  get locales() {\n    if (!Platform.isDOMAvailable) {\n      return [];\n    }\n\n    const {\n      languages = []\n    } = navigator;\n    return Array.from(languages);\n  },\n\n  get timezone() {\n    const defaultTimeZone = 'Etc/UTC';\n\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n\n  get isoCurrencyCodes() {\n    // TODO(Bacon): Add this - very low priority\n    return [];\n  },\n\n  get region() {\n    // There is no way to obtain the current region, as is possible on native.\n    // Instead, use the country-code from the locale when possible (e.g. \"en-US\").\n    const {\n      locale\n    } = this;\n    const [, ...suffixes] = typeof locale === 'string' ? locale.split('-') : [];\n\n    for (const suffix of suffixes) {\n      if (suffix.length === 2) {\n        return suffix.toUpperCase();\n      }\n    }\n\n    return null;\n  },\n\n  async getLocalizationAsync() {\n    const {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone\n    } = this;\n    return {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone\n    };\n  }\n\n};","map":{"version":3,"mappings":"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","names":["Platform","rtlDetect","currency","decimalSeparator","toLocaleString","substring","digitGroupingSeparator","value","length","isRTL","isRtlLang","locale","isMetric","region","isDOMAvailable","navigator","language","locales","languages","Array","from","timezone","defaultTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","isoCurrencyCodes","suffixes","split","suffix","toUpperCase","getLocalizationAsync"],"sourceRoot":"","sources":["../src/ExpoLocalization.ts"],"sourcesContent":["/* eslint-env browser */\nimport { Platform } from 'expo-modules-core';\nimport * as rtlDetect from 'rtl-detect';\n\nimport { Localization } from './Localization.types';\n\nexport default {\n  get currency(): string | null {\n    // TODO: Add support\n    return null;\n  },\n  get decimalSeparator(): string {\n    return (1.1).toLocaleString().substring(1, 2);\n  },\n  get digitGroupingSeparator(): string {\n    const value = (1000).toLocaleString();\n    return value.length === 5 ? value.substring(1, 2) : '';\n  },\n  get isRTL(): boolean {\n    return rtlDetect.isRtlLang(this.locale) ?? false;\n  },\n  get isMetric(): boolean {\n    const { region } = this;\n    switch (region) {\n      case 'US': // USA\n      case 'LR': // Liberia\n      case 'MM': // Myanmar\n        return false;\n    }\n    return true;\n  },\n  get locale(): string {\n    if (!Platform.isDOMAvailable) {\n      return '';\n    }\n    const locale =\n      navigator.language ||\n      navigator['systemLanguage'] ||\n      navigator['browserLanguage'] ||\n      navigator['userLanguage'] ||\n      this.locales[0];\n    return locale;\n  },\n  get locales(): string[] {\n    if (!Platform.isDOMAvailable) {\n      return [];\n    }\n    const { languages = [] } = navigator;\n    return Array.from(languages);\n  },\n  get timezone(): string {\n    const defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes(): string[] {\n    // TODO(Bacon): Add this - very low priority\n    return [];\n  },\n  get region(): string | null {\n    // There is no way to obtain the current region, as is possible on native.\n    // Instead, use the country-code from the locale when possible (e.g. \"en-US\").\n    const { locale } = this;\n    const [, ...suffixes] = typeof locale === 'string' ? locale.split('-') : [];\n    for (const suffix of suffixes) {\n      if (suffix.length === 2) {\n        return suffix.toUpperCase();\n      }\n    }\n    return null;\n  },\n  async getLocalizationAsync(): Promise<Localization> {\n    const {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone,\n    } = this;\n    return {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}